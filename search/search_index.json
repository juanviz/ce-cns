{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CUSTOMIZED Workshop: Deploy a Java microservices application to IBM Cloud Code Engine \u00b6 Objectives \u00b6 The workshop addresses the topic containerized applications on IBM Cloud Code Engine . After you complete this workshop, you'll have a basic understanding of the following: Deploy an existing Java microservices containerized application example to Code Engine See the usage of the IBM Cloud Code Engine CLI Understand internal and external HTTP/HTTPS routing between the microservices Use the Out-Of-The-Box monitoring for the example application Use the Out-Of-The-Box logging for the example application The scope of this workshop is not to explain every aspect of running an application or job on Code Engine . It's just about containerized applications. Here is a 1-hour YouTube live stream on IBM Developer Prerequisites \u00b6 In order to run this workshop, you will need to create an IBM Cloud PayAsYouGo account (or log in to your existing account). Code Engine has a free tier per month, and we expect, if you haven't used that free tier in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free lite plans for the service instances IBM Cloud Monitoring and IBM Cloud Log Analysis . You should have a basic understanding of containerized applications Estimated time and level \u00b6 Time Level 1 h beginners Architecture \u00b6 This workshop is related to the Cloud Native Starter project. In the workshop we use a customized version of the security application example . The example application simply shows articles protected with an Identity and Access Manegement . In the following picture you see the frontend with the articles and the valid user alice is logged on. The following diagram shows the architecture of the example application. There is a web-app frontend application that serves the JavaScript/Vue.js code to the browser. The web-app code running in the browser invokes a REST API of the web-api microservice. The web-api microservice in turn invokes a REST API of the articles microservice. Keycloak is used for the Identity and Access Management of that microservices based application. To see the results in the web application, users need to be authenticated and they need to have the role user . The image below shows the dependencies of the example: External and internal routing In our context it's useful to have a basic understanding of the routing for example application. Based on the functionality of the application, we need three external routes for the example application. Each external route communication will be automatically secured with a TLS Encryption created by Code Engine using Let's encrypt . The three applications are the web-app which will be loaded into the browser, the Keycloak that must be available for the authentication/authorization to our application and for potential configuration the Identity and Access Management and finally the web-api microservice which provides the articles data and will be invoked be the web-app . The articles microservice doesn't need to be invoked from external, so it's configured to provide only an internal route , which is used by the web-api microservice to get the articles from. Basics about the deployment For an easy deployment prebuild containers were created and pushed to a Quay container registry . In the following table you see the application /container, the exposed routes , uses of TLS Encryption , the scale to zero configuration, the container registry where the prebuild container comes from, the configuration for vCPU and Memory in GB and the min/max Instances for the applications. Application Route TLS Encryption Scale to zero Container Registry vCPU Memory min Instances max Instances web-app external yes yes Quay 0.5 1 GB 0 1 keycloak external yes no Docker 0.5 1 GB 1 1 web-api external yes yes Quay 0.5 1 GB 0 1 articles internal no (mTLS coming sone) yes Quay 0.25 0.5G GB 0 1 The Keycloak application for the Identity and Access Management isn't configured to scale to zero , because the application is stateful and contains the realm configuration, which will be delete, if you would restart the application. Note: The project also contains the source code, that you can use to customize to your an own version of the microservices based example application. About this workshop \u00b6 Agenda \u00b6 These are the sections of this workshop, go through all of them in sequence, start with Lab 1. Setup the example application : Setup the example application Inspect the Code Engine project Monitoring of the applications Logging of the applications Cleanup the example application Optional Labs: Run the example application locally Push the example containers to a container registry Compatibility \u00b6 The workshop uses following IBM Cloud Services: IBM Cloud Code Engine IBM Cloud Monitoring (lite plan) IBM Cloud Log Analysis (lite plan) IBM Cloud Code Engine is build on Open Source technologies: Knative Kubernetes Istio Tekton Technology Used \u00b6 The example mircorservices application example is build with following technologies/tools/frameworks . Microservices architecture Keycloak Jakarta EE MicroProfile Quarkus Vue.js NGINX git 2.24.1 or higher yarn 1.22.4 or higher Node.js v14.6.0 or higher Apache Maven 3.6.3 Credits \u00b6 Thomas S\u00fcdbr\u00f6cker Niklas Heidloff (Feedback and Cloud Native Starter project) Simon Moser (Feedback) Doug Davis (Feedback) Additional resources \u00b6 IBM CLoud Code Engine: Examples on GitHub Code Engine CLI reference Cloud Native Starter example source code: Cloud-Native-Starter project Cloud-Native-Starter project security Keycloak Keycloak core concepts of open-source identity and access management Setting up Keycloak in OpenShift Security in Quarkus Applications via Keycloak Securing Vue.js Applications with Keycloak Simply logout from Keycloak How to create a new realm with the Keycloak REST API Quarkus How to use environment variables to make a containerized Quarkus application more flexible Configure the attach debug for Quarkus in Visual Studio Code Vue.js Use environment variables to make a containerized Vue.js frontend application more flexible and deploy it to Code Engine How to debug the Javascript code of a Vue.js application using Visual Studio Code","title":"Workshop overview"},{"location":"#customized-workshop-deploy-a-java-microservices-application-to-ibm-cloud-code-engine","text":"","title":"CUSTOMIZED Workshop: Deploy a Java microservices application to IBM Cloud Code Engine"},{"location":"#objectives","text":"The workshop addresses the topic containerized applications on IBM Cloud Code Engine . After you complete this workshop, you'll have a basic understanding of the following: Deploy an existing Java microservices containerized application example to Code Engine See the usage of the IBM Cloud Code Engine CLI Understand internal and external HTTP/HTTPS routing between the microservices Use the Out-Of-The-Box monitoring for the example application Use the Out-Of-The-Box logging for the example application The scope of this workshop is not to explain every aspect of running an application or job on Code Engine . It's just about containerized applications. Here is a 1-hour YouTube live stream on IBM Developer","title":"Objectives"},{"location":"#prerequisites","text":"In order to run this workshop, you will need to create an IBM Cloud PayAsYouGo account (or log in to your existing account). Code Engine has a free tier per month, and we expect, if you haven't used that free tier in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free lite plans for the service instances IBM Cloud Monitoring and IBM Cloud Log Analysis . You should have a basic understanding of containerized applications","title":"Prerequisites"},{"location":"#estimated-time-and-level","text":"Time Level 1 h beginners","title":"Estimated time and level"},{"location":"#architecture","text":"This workshop is related to the Cloud Native Starter project. In the workshop we use a customized version of the security application example . The example application simply shows articles protected with an Identity and Access Manegement . In the following picture you see the frontend with the articles and the valid user alice is logged on. The following diagram shows the architecture of the example application. There is a web-app frontend application that serves the JavaScript/Vue.js code to the browser. The web-app code running in the browser invokes a REST API of the web-api microservice. The web-api microservice in turn invokes a REST API of the articles microservice. Keycloak is used for the Identity and Access Management of that microservices based application. To see the results in the web application, users need to be authenticated and they need to have the role user . The image below shows the dependencies of the example: External and internal routing In our context it's useful to have a basic understanding of the routing for example application. Based on the functionality of the application, we need three external routes for the example application. Each external route communication will be automatically secured with a TLS Encryption created by Code Engine using Let's encrypt . The three applications are the web-app which will be loaded into the browser, the Keycloak that must be available for the authentication/authorization to our application and for potential configuration the Identity and Access Management and finally the web-api microservice which provides the articles data and will be invoked be the web-app . The articles microservice doesn't need to be invoked from external, so it's configured to provide only an internal route , which is used by the web-api microservice to get the articles from. Basics about the deployment For an easy deployment prebuild containers were created and pushed to a Quay container registry . In the following table you see the application /container, the exposed routes , uses of TLS Encryption , the scale to zero configuration, the container registry where the prebuild container comes from, the configuration for vCPU and Memory in GB and the min/max Instances for the applications. Application Route TLS Encryption Scale to zero Container Registry vCPU Memory min Instances max Instances web-app external yes yes Quay 0.5 1 GB 0 1 keycloak external yes no Docker 0.5 1 GB 1 1 web-api external yes yes Quay 0.5 1 GB 0 1 articles internal no (mTLS coming sone) yes Quay 0.25 0.5G GB 0 1 The Keycloak application for the Identity and Access Management isn't configured to scale to zero , because the application is stateful and contains the realm configuration, which will be delete, if you would restart the application. Note: The project also contains the source code, that you can use to customize to your an own version of the microservices based example application.","title":"Architecture"},{"location":"#about-this-workshop","text":"","title":"About this workshop"},{"location":"#agenda","text":"These are the sections of this workshop, go through all of them in sequence, start with Lab 1. Setup the example application : Setup the example application Inspect the Code Engine project Monitoring of the applications Logging of the applications Cleanup the example application Optional Labs: Run the example application locally Push the example containers to a container registry","title":"Agenda"},{"location":"#compatibility","text":"The workshop uses following IBM Cloud Services: IBM Cloud Code Engine IBM Cloud Monitoring (lite plan) IBM Cloud Log Analysis (lite plan) IBM Cloud Code Engine is build on Open Source technologies: Knative Kubernetes Istio Tekton","title":"Compatibility"},{"location":"#technology-used","text":"The example mircorservices application example is build with following technologies/tools/frameworks . Microservices architecture Keycloak Jakarta EE MicroProfile Quarkus Vue.js NGINX git 2.24.1 or higher yarn 1.22.4 or higher Node.js v14.6.0 or higher Apache Maven 3.6.3","title":"Technology Used"},{"location":"#credits","text":"Thomas S\u00fcdbr\u00f6cker Niklas Heidloff (Feedback and Cloud Native Starter project) Simon Moser (Feedback) Doug Davis (Feedback)","title":"Credits"},{"location":"#additional-resources","text":"IBM CLoud Code Engine: Examples on GitHub Code Engine CLI reference Cloud Native Starter example source code: Cloud-Native-Starter project Cloud-Native-Starter project security Keycloak Keycloak core concepts of open-source identity and access management Setting up Keycloak in OpenShift Security in Quarkus Applications via Keycloak Securing Vue.js Applications with Keycloak Simply logout from Keycloak How to create a new realm with the Keycloak REST API Quarkus How to use environment variables to make a containerized Quarkus application more flexible Configure the attach debug for Quarkus in Visual Studio Code Vue.js Use environment variables to make a containerized Vue.js frontend application more flexible and deploy it to Code Engine How to debug the Javascript code of a Vue.js application using Visual Studio Code","title":"Additional resources"},{"location":"app-id-optional/","text":"Optional Lab 3: Run the example application with App ID \u00b6 In this optional lab we use for authentication and authorization an IBM Cloud App ID service instance. We use for this IBM Cloud App ID service instance the \"lite\" plan, this does not create additional costs for us. Currently this lab is not documented very detailed. Architecture \u00b6 Here is a simplified architecture diagram which shows the Web-App and the two microservices Web-API and Articles and App ID are running on IBM Cloud. Code Engine applications Web-App Web-API Articles IBM Cloud services App ID Deploy the example application with App ID \u00b6 (optional) Step 1 : Clone the GitHub project to the IBM Cloud Shell \u00b6 Only needed, if you haven't done it before. Insert these commands to clone the GitHub project to the IBM Cloud Shell . git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd ) Step 2: Now set the environment variable for later usage \u00b6 Only needed, if you haven't done it before. REMEMBER! Your Code Engine project name cloud-native-starter-[YOUR-EXTENTION] export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ] Step 3: Execute following bash automation \u00b6 Be patient, because the script may take several minutes ( up to 10 min ). cd $ROOT_FOLDER /CE bash appid-ce-deploy-apps.sh Step 4: Simplified steps of the bash script \u00b6 Here are the simplified steps that are carried out in the bash script using mainly the IBM Cloud Code Engine CLI : Connect to the Code Engine project with the Code Engine CLI and get the namespace for later usage to define the internal route. Create an App ID instance Configure the App ID instance Deploy articles microservice which is defined as local cluster here, we need to know the namespace . ( details are related to Knative ) Deploy web-api with the needed App ID and articles urls as environment variables. Deploy web-app with the needed App ID and web-api urls as environment variables. Step 5: Inspect the output \u00b6 The relevant urls will be listed. ************************************ URLs ************************************ - oAuthServerUrl : https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156 - discoveryEndpoint: https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156/.well-known/openid-configuration - Web-API : https://web-api-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud/articlesA - Articles : http://articles-appid.eqiatmmvvti.svc.cluster.local/articlesA - Web-App : https://web-app-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud Step 6: Open the example web-app application in your browser \u00b6 Use user: thomas@example.com and password: thomas4appid for the logon. Step 7: Show the sample articles \u00b6 Maybe you need to reload or log on again, to get all applications up and running in Code Engine. Step 8: Clean-up \u00b6 cd $ROOT_FOLDER /CE bash appid-ce-clean-up.sh Congratulations, you have successfully completed this optional hands-on lab tasks for Authentication and Authorization with Keycloak and Quarkus section of the workshop. Awesome","title":"Optional Lab 3: Run the example application with App ID"},{"location":"app-id-optional/#optional-lab-3-run-the-example-application-with-app-id","text":"In this optional lab we use for authentication and authorization an IBM Cloud App ID service instance. We use for this IBM Cloud App ID service instance the \"lite\" plan, this does not create additional costs for us. Currently this lab is not documented very detailed.","title":"Optional Lab 3: Run the example application with App ID"},{"location":"app-id-optional/#architecture","text":"Here is a simplified architecture diagram which shows the Web-App and the two microservices Web-API and Articles and App ID are running on IBM Cloud. Code Engine applications Web-App Web-API Articles IBM Cloud services App ID","title":"Architecture"},{"location":"app-id-optional/#deploy-the-example-application-with-app-id","text":"","title":"Deploy the example application with App ID"},{"location":"app-id-optional/#optional-step-1-clone-the-github-project-to-the-ibm-cloud-shell","text":"Only needed, if you haven't done it before. Insert these commands to clone the GitHub project to the IBM Cloud Shell . git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd )","title":"(optional) Step 1 : Clone the GitHub project to the IBM Cloud Shell"},{"location":"app-id-optional/#step-2-now-set-the-environment-variable-for-later-usage","text":"Only needed, if you haven't done it before. REMEMBER! Your Code Engine project name cloud-native-starter-[YOUR-EXTENTION] export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ]","title":"Step 2: Now set the environment variable for later usage"},{"location":"app-id-optional/#step-3-execute-following-bash-automation","text":"Be patient, because the script may take several minutes ( up to 10 min ). cd $ROOT_FOLDER /CE bash appid-ce-deploy-apps.sh","title":"Step 3: Execute following bash automation"},{"location":"app-id-optional/#step-4-simplified-steps-of-the-bash-script","text":"Here are the simplified steps that are carried out in the bash script using mainly the IBM Cloud Code Engine CLI : Connect to the Code Engine project with the Code Engine CLI and get the namespace for later usage to define the internal route. Create an App ID instance Configure the App ID instance Deploy articles microservice which is defined as local cluster here, we need to know the namespace . ( details are related to Knative ) Deploy web-api with the needed App ID and articles urls as environment variables. Deploy web-app with the needed App ID and web-api urls as environment variables.","title":"Step 4: Simplified steps of the bash script"},{"location":"app-id-optional/#step-5-inspect-the-output","text":"The relevant urls will be listed. ************************************ URLs ************************************ - oAuthServerUrl : https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156 - discoveryEndpoint: https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156/.well-known/openid-configuration - Web-API : https://web-api-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud/articlesA - Articles : http://articles-appid.eqiatmmvvti.svc.cluster.local/articlesA - Web-App : https://web-app-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud","title":"Step 5: Inspect the output"},{"location":"app-id-optional/#step-6-open-the-example-web-app-application-in-your-browser","text":"Use user: thomas@example.com and password: thomas4appid for the logon.","title":"Step 6: Open the example web-app application in your browser"},{"location":"app-id-optional/#step-7-show-the-sample-articles","text":"Maybe you need to reload or log on again, to get all applications up and running in Code Engine.","title":"Step 7: Show the sample articles"},{"location":"app-id-optional/#step-8-clean-up","text":"cd $ROOT_FOLDER /CE bash appid-ce-clean-up.sh Congratulations, you have successfully completed this optional hands-on lab tasks for Authentication and Authorization with Keycloak and Quarkus section of the workshop. Awesome","title":"Step 8: Clean-up"},{"location":"cleanup-example/","text":"Lab 5: Cleanup the project \u00b6 We will delete all applications from your Code Engine project. Remember, the Keycloak application for the Identity and Access Management isn't configured to scale to zero , because the application is stateful and contains the realm configuration, which will be delete, if you would restart the application. Here we just delete all applications to avoid additional costs for you. Note: You can also us the UI, in that Lab we use a bash script using the IBM Cloud Code Engine CLI Step 1: Open the IBM Cloud Shell \u00b6 Use following link to directly open the IBM Cloud Shell . https://cloud.ibm.com/shell In your browser, login to the IBM Cloud Dashboard and open the IBM Cloud Shell from here: Step 2: IBM Cloud Shell \u00b6 Now you are logged on with your IBM Cloud account. Step 3: (Optional) Clone the GitHub project to the IBM Cloud Shell \u00b6 In case your IBM Cloud Shell session has expired it cloud be that the cloned project was deleted. Then you need to clone the project again, because we will use a bash script for the deletion of the project. git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd ) Step 4: Now set the environment variable for later usage \u00b6 REMEMBER! Code Engine project name cloud-native-starter-[YOUR-EXTENTION] cd $ROOT_FOLDER /CE export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ] Step 3: Execute following bash automation \u00b6 bash ce-remove-apps.sh Relevant for your configuration are following variables in the bash script: export PROJECT_NAME = $MYPROJECT #your project name export RESOURCE_GROUP = default #the resource group you defined during the creation of the project export REPOSITORY = tsuedbroecker #the name of the public container repository on Quay export REGION = \"us-south\" #the region with is used when you choose Dallas as location during the creation of the project Step 4: Inspect the execution output \u00b6 The following shows an example execution result of the bash script. ************************************ Here are your remaing applications in your project cloud-native-starter-tsuedbro ************************************ Listing all applications... OK Congratulations, you have successfully completed this hands-on workshop. Awesome you did it","title":"5. Cleanup the example application"},{"location":"cleanup-example/#lab-5-cleanup-the-project","text":"We will delete all applications from your Code Engine project. Remember, the Keycloak application for the Identity and Access Management isn't configured to scale to zero , because the application is stateful and contains the realm configuration, which will be delete, if you would restart the application. Here we just delete all applications to avoid additional costs for you. Note: You can also us the UI, in that Lab we use a bash script using the IBM Cloud Code Engine CLI","title":"Lab 5: Cleanup the project"},{"location":"cleanup-example/#step-1-open-the-ibm-cloud-shell","text":"Use following link to directly open the IBM Cloud Shell . https://cloud.ibm.com/shell In your browser, login to the IBM Cloud Dashboard and open the IBM Cloud Shell from here:","title":"Step 1: Open the IBM Cloud Shell"},{"location":"cleanup-example/#step-2-ibm-cloud-shell","text":"Now you are logged on with your IBM Cloud account.","title":"Step 2: IBM Cloud Shell"},{"location":"cleanup-example/#step-3-optional-clone-the-github-project-to-the-ibm-cloud-shell","text":"In case your IBM Cloud Shell session has expired it cloud be that the cloned project was deleted. Then you need to clone the project again, because we will use a bash script for the deletion of the project. git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd )","title":"Step 3: (Optional) Clone the GitHub project to the IBM Cloud Shell"},{"location":"cleanup-example/#step-4-now-set-the-environment-variable-for-later-usage","text":"REMEMBER! Code Engine project name cloud-native-starter-[YOUR-EXTENTION] cd $ROOT_FOLDER /CE export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ]","title":"Step 4: Now set the environment variable for later usage"},{"location":"cleanup-example/#step-3-execute-following-bash-automation","text":"bash ce-remove-apps.sh Relevant for your configuration are following variables in the bash script: export PROJECT_NAME = $MYPROJECT #your project name export RESOURCE_GROUP = default #the resource group you defined during the creation of the project export REPOSITORY = tsuedbroecker #the name of the public container repository on Quay export REGION = \"us-south\" #the region with is used when you choose Dallas as location during the creation of the project","title":"Step 3: Execute following bash automation"},{"location":"cleanup-example/#step-4-inspect-the-execution-output","text":"The following shows an example execution result of the bash script. ************************************ Here are your remaing applications in your project cloud-native-starter-tsuedbro ************************************ Listing all applications... OK Congratulations, you have successfully completed this hands-on workshop. Awesome you did it","title":"Step 4: Inspect the execution output"},{"location":"inspect-the-project/","text":"Lab 2: Inspect the Code Engine project \u00b6 Step 1: Open the Code Engine project \u00b6 Use following link to directly navigate to the Code Engine projects and open the created project. https://cloud.ibm.com/codeengine/projects Step 2: Select Overview \u00b6 In the following image you see: The summary containing the Applications, Jobs, Image builds, Registry access, Secrets and Configmaps. In our case only the four applications are relevant. The currenly usage of our application. Step 3: Select Applications \u00b6 Here you find an overview of the currently running applications. (FYI The Code Engine definition for an application: A program that serves HTTP requests ) Step 4: Open the web-api application \u00b6 Here we find the configurations for the application. First select the Code tab. Here you see our container image reference to the Quay container registry. Then select the Runtime tab. The configuration for the instances, vCPU, memory and requests. Note: For more details about valid vCPU and Memory combinations please visit the documentation here . Now select to Environment variables tab. Here you see the routes for the wep-api microservice to setup the connections internal articels microservice and the external Keycloak application. Note: In following code you see the Code Engine CLI invocation for the web-api microservice, that is used in the bash script. It reflects what you see in the Code Engine UI. # Valid vCPU and memory combinations: https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo ibmcloud ce application create --name web-api \\ --image \"quay.io/ $REPOSITORY /web-api-ce:v7\" \\ --cpu \"0.5\" \\ --memory \"1G\" \\ --env QUARKUS_OIDC_AUTH_SERVER_URL = \" $KEYCLOAK_URL /auth/realms/quarkus\" \\ --env CNS_ARTICLES_URL = \"http://articles. $NAMESPACE .svc.cluster.local/articles\" \\ --max-scale 1 \\ --min-scale 0 \\ --port 8081 Congratulations, you have successfully completed this hands-on lab Inspect the Code Engine project of the workshop. Awesome","title":"2. Inspect the `Code Engine` project"},{"location":"inspect-the-project/#lab-2-inspect-the-code-engine-project","text":"","title":"Lab 2: Inspect the Code Engine project"},{"location":"inspect-the-project/#step-1-open-the-code-engine-project","text":"Use following link to directly navigate to the Code Engine projects and open the created project. https://cloud.ibm.com/codeengine/projects","title":"Step 1: Open the Code Engine project"},{"location":"inspect-the-project/#step-2-select-overview","text":"In the following image you see: The summary containing the Applications, Jobs, Image builds, Registry access, Secrets and Configmaps. In our case only the four applications are relevant. The currenly usage of our application.","title":"Step 2: Select Overview"},{"location":"inspect-the-project/#step-3-select-applications","text":"Here you find an overview of the currently running applications. (FYI The Code Engine definition for an application: A program that serves HTTP requests )","title":"Step 3: Select Applications"},{"location":"inspect-the-project/#step-4-open-the-web-api-application","text":"Here we find the configurations for the application. First select the Code tab. Here you see our container image reference to the Quay container registry. Then select the Runtime tab. The configuration for the instances, vCPU, memory and requests. Note: For more details about valid vCPU and Memory combinations please visit the documentation here . Now select to Environment variables tab. Here you see the routes for the wep-api microservice to setup the connections internal articels microservice and the external Keycloak application. Note: In following code you see the Code Engine CLI invocation for the web-api microservice, that is used in the bash script. It reflects what you see in the Code Engine UI. # Valid vCPU and memory combinations: https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo ibmcloud ce application create --name web-api \\ --image \"quay.io/ $REPOSITORY /web-api-ce:v7\" \\ --cpu \"0.5\" \\ --memory \"1G\" \\ --env QUARKUS_OIDC_AUTH_SERVER_URL = \" $KEYCLOAK_URL /auth/realms/quarkus\" \\ --env CNS_ARTICLES_URL = \"http://articles. $NAMESPACE .svc.cluster.local/articles\" \\ --max-scale 1 \\ --min-scale 0 \\ --port 8081 Congratulations, you have successfully completed this hands-on lab Inspect the Code Engine project of the workshop. Awesome","title":"Step 4: Open the web-api application"},{"location":"logging/","text":"Lab 4: Logging of the applications \u00b6 Here we use the IBM Cloud Log Analysis (lite plan). Create the logging service automatically \u00b6 You can create the lite service instances for logging and monitoring by using this bash script. cd $ROOT_FOLDER /CE bash ce-create-monitoring-logging-services.sh Open the logging for all applications \u00b6 Step 1: Go back to the project overview \u00b6 Step 2: Select Actions -> Logging \u00b6 In case you don't have an existing instance of IBM Cloud Log Analysis Code Engine follow steps in Create an IBM Cloud Log Analysis service manually or use the bash script. Step 3: Verify the IBM Cloud Log Analysis will be opened in the browser \u00b6 Create an IBM Cloud Log Analysis service manually \u00b6 Step 1: Select Actions -> Add logging \u00b6 In case you don't have an existing instance of IBM Cloud Log Analysis Code Engine will automatically guide you to create a lite plan instance, when you select Actions -> Add logging . Step 2: In the upcoming dialog select Lite and leave the defaults selected for region and resource group . \u00b6 Name the service instance IBMCloudLogging-Code-Engine and press Create . Step 3: Refresh your browser with your Code Engine project. \u00b6 When the IBM Cloud Log Analysis is ready and you select Actions -> Add logging again, following dialog will appear. In this dialog you select your just created IBM Cloud Log Analysis service instance with the name IBMCloudLogging-Code-Engine . Now you use the IBM Cloud Log Analysis service. Configure a filter for the logging \u00b6 Step 1: Select from Sources Code Engine \u00b6 Step 2: Insert \"-->log:\" as a text filter \u00b6 \"-->log:\" Step 3: Invoke the frontend application several times \u00b6 In the gif you see an example result. Now you filter the custom console outputs of the microservices web-api and articles . If you want to can save it as a view in the Log Analysis UI . For more details please use the IBM Cloud Code Engine documentation for logging Congratulations, you have successfully completed this hands-on lab Logging of the applications of the workshop. Awesome","title":"4. Logging of the applications"},{"location":"logging/#lab-4-logging-of-the-applications","text":"Here we use the IBM Cloud Log Analysis (lite plan).","title":"Lab 4: Logging of the applications"},{"location":"logging/#create-the-logging-service-automatically","text":"You can create the lite service instances for logging and monitoring by using this bash script. cd $ROOT_FOLDER /CE bash ce-create-monitoring-logging-services.sh","title":"Create the logging service automatically"},{"location":"logging/#open-the-logging-for-all-applications","text":"","title":"Open the logging for all applications"},{"location":"logging/#step-1-go-back-to-the-project-overview","text":"","title":"Step 1: Go back to the project overview"},{"location":"logging/#step-2-select-actions-logging","text":"In case you don't have an existing instance of IBM Cloud Log Analysis Code Engine follow steps in Create an IBM Cloud Log Analysis service manually or use the bash script.","title":"Step 2: Select Actions -&gt; Logging"},{"location":"logging/#step-3-verify-the-ibm-cloud-log-analysis-will-be-opened-in-the-browser","text":"","title":"Step 3: Verify the IBM Cloud Log Analysis will be opened in the browser"},{"location":"logging/#create-an-ibm-cloud-log-analysis-service-manually","text":"","title":"Create an IBM Cloud Log Analysis service manually"},{"location":"logging/#step-1-select-actions-add-logging","text":"In case you don't have an existing instance of IBM Cloud Log Analysis Code Engine will automatically guide you to create a lite plan instance, when you select Actions -> Add logging .","title":"Step 1: Select Actions -&gt; Add logging"},{"location":"logging/#step-2-in-the-upcoming-dialog-select-lite-and-leave-the-defaults-selected-for-region-and-resource-group","text":"Name the service instance IBMCloudLogging-Code-Engine and press Create .","title":"Step 2: In the upcoming dialog select Lite and leave the defaults selected for region and resource group."},{"location":"logging/#step-3-refresh-your-browser-with-your-code-engine-project","text":"When the IBM Cloud Log Analysis is ready and you select Actions -> Add logging again, following dialog will appear. In this dialog you select your just created IBM Cloud Log Analysis service instance with the name IBMCloudLogging-Code-Engine . Now you use the IBM Cloud Log Analysis service.","title":"Step 3: Refresh your browser with your Code Engine project."},{"location":"logging/#configure-a-filter-for-the-logging","text":"","title":"Configure a filter for the logging"},{"location":"logging/#step-1-select-from-sources-code-engine","text":"","title":"Step 1: Select from Sources Code Engine"},{"location":"logging/#step-2-insert-log-as-a-text-filter","text":"\"-->log:\"","title":"Step 2: Insert \"--&gt;log:\" as a text filter"},{"location":"logging/#step-3-invoke-the-frontend-application-several-times","text":"In the gif you see an example result. Now you filter the custom console outputs of the microservices web-api and articles . If you want to can save it as a view in the Log Analysis UI . For more details please use the IBM Cloud Code Engine documentation for logging Congratulations, you have successfully completed this hands-on lab Logging of the applications of the workshop. Awesome","title":"Step 3: Invoke the frontend application several times"},{"location":"monitoring/","text":"Lab 3: Application Monitoring \u00b6 Here we use the IBM Cloud Monitoring (lite plan) service. Create the monitoring service automatically \u00b6 You can create the lite service instances for logging and monitoring by using this bash script. cd $ROOT_FOLDER /CE bash ce-create-monitoring-logging-services.sh Open the monitoring for all applications \u00b6 Step 1: Go back to the project overview \u00b6 Step 2: Select Actions -> Monitoring \u00b6 Step 3: Verify that IBM Cloud Monitoring opens in the browser \u00b6 Create an IBM Cloud Monitoring service manually \u00b6 Step 1: Select Add monitoring \u00b6 In case you don't have an existing instance of IBM Cloud Monitoring Code Engine will automatically guide you to create a lite plan instance, when you select Add monitoring . Step 2: In the upcoming dialog select Lite and leave the defaults selected for region and resource group \u00b6 Name the service instance IBMCloudMonitoring-Code-Engine and press Create . Step 3: Refresh your browser with your Code Engine project. \u00b6 Now you will notice that you can select Actions -> Monitoring . Inspect the monitoring posibilities \u00b6 Step 1: Expore the given monitoring posibilities \u00b6 For more details please use the IBM Cloud Code Engine documentation for monitoring . Congratulations, you have successfully completed this hands-on lab Application Monitoring of the workshop. Awesome","title":"3. Monitoring of the applications"},{"location":"monitoring/#lab-3-application-monitoring","text":"Here we use the IBM Cloud Monitoring (lite plan) service.","title":"Lab 3: Application Monitoring"},{"location":"monitoring/#create-the-monitoring-service-automatically","text":"You can create the lite service instances for logging and monitoring by using this bash script. cd $ROOT_FOLDER /CE bash ce-create-monitoring-logging-services.sh","title":"Create the monitoring service automatically"},{"location":"monitoring/#open-the-monitoring-for-all-applications","text":"","title":"Open the monitoring for all applications"},{"location":"monitoring/#step-1-go-back-to-the-project-overview","text":"","title":"Step 1: Go back to the project overview"},{"location":"monitoring/#step-2-select-actions-monitoring","text":"","title":"Step 2: Select Actions -&gt; Monitoring"},{"location":"monitoring/#step-3-verify-that-ibm-cloud-monitoring-opens-in-the-browser","text":"","title":"Step 3: Verify that IBM Cloud Monitoring opens in the browser"},{"location":"monitoring/#create-an-ibm-cloud-monitoring-service-manually","text":"","title":"Create an IBM Cloud Monitoring service manually"},{"location":"monitoring/#step-1-select-add-monitoring","text":"In case you don't have an existing instance of IBM Cloud Monitoring Code Engine will automatically guide you to create a lite plan instance, when you select Add monitoring .","title":"Step 1: Select Add monitoring"},{"location":"monitoring/#step-2-in-the-upcoming-dialog-select-lite-and-leave-the-defaults-selected-for-region-and-resource-group","text":"Name the service instance IBMCloudMonitoring-Code-Engine and press Create .","title":"Step 2: In the upcoming dialog select Lite and leave the defaults selected for region and resource group"},{"location":"monitoring/#step-3-refresh-your-browser-with-your-code-engine-project","text":"Now you will notice that you can select Actions -> Monitoring .","title":"Step 3: Refresh your browser with your Code Engine project."},{"location":"monitoring/#inspect-the-monitoring-posibilities","text":"","title":"Inspect the monitoring posibilities"},{"location":"monitoring/#step-1-expore-the-given-monitoring-posibilities","text":"For more details please use the IBM Cloud Code Engine documentation for monitoring . Congratulations, you have successfully completed this hands-on lab Application Monitoring of the workshop. Awesome","title":"Step 1: Expore the given monitoring posibilities"},{"location":"push-to-container-registry/","text":"Optional Lab 2: Push the example containers to a container registry \u00b6 In this optional lab we will push your example containers to a container registry. We use the free Red Hat Quay.io as our example container registry. Quay has a Community Distribution that powers Red Hat Quay and Quay.io called Project QUAY You need to create a free account. You can also use the IBM Cloud Registry which has a free lite plan with limited resources of Storage (Gigabyte-Months) - 0.5 GB free per month and pull traffic (Gigabytes) - 5 GB free per month. Please visit the IBM Cloud Registry catalog for the current pricing . To run these optional exercises, you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions. git 2.24.1 or higher Docker 3.0.4 or higher Step 1: Login to Quay on your local machine \u00b6 docker login quay.io Step 2: Ensure $ROOT_PATH variable is set to YOUR_PATH/ce-cns of your cloned repository \u00b6 Display the $ROOT_PATH you set in Lab 1: Setup the example application . echo $ROOT_PATH Step 3: Configure articles \u00b6 When you run the articles microservice on CE ensure you have uncomment quarkus.http.port=8080 and #quarkus.http.port=8083 commented out. cd $ROOT_FOLDER /code/articles/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = http : //localhost:8282/auth/realms/quarkus quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret quarkus . http . port = 8080 # When running locally , uncomment the next line , to use the port 8083 # quarkus . http . port = 8083 quarkus . http . cors = true resteasy . role . based . security = true Step 4: Export your Quay username as your repository name \u00b6 export MY_REPOSITORY = YOUR_USERNAME Note: In the image below you see an example where you can find the name, you should use. Step 5: Execute following bash automation \u00b6 This bash script will build and push your container images to Red Hat Quay.io . cd $ROOT_FOLDER /CE bash quay-build-and-push.sh Step 6: Verify the public access for your containers \u00b6 Visit your repository on Red Hat Quay.io and very your container are available for public usage. This is only the case if you going to run the same setup as given in Lab 1: Setup the example application . Step 7: Update the ce-deploy-apps.sh bash script \u00b6 Now you have to refect the changes you made for the container registry in the ce-deploy-apps.sh , in case if you plan to use this bash script to deploy your containers to Code Engine . Open the bash script with an editor cd $ROOT_FOLDER /ce nano ce-deploy-apps.sh In case you have just change the repository name, you only have to replace tsuedbroecker with your value and it should work. ... export PROJECT_NAME = $MYPROJECT export RESOURCE_GROUP = default export REPOSITORY = tsuedbroecker ... Congratulations, you have successfully completed this optional hands-on lab tasks for Push the example containers to a container registry section of the workshop. Awesome","title":"2. Push containers to a container registry"},{"location":"push-to-container-registry/#optional-lab-2-push-the-example-containers-to-a-container-registry","text":"In this optional lab we will push your example containers to a container registry. We use the free Red Hat Quay.io as our example container registry. Quay has a Community Distribution that powers Red Hat Quay and Quay.io called Project QUAY You need to create a free account. You can also use the IBM Cloud Registry which has a free lite plan with limited resources of Storage (Gigabyte-Months) - 0.5 GB free per month and pull traffic (Gigabytes) - 5 GB free per month. Please visit the IBM Cloud Registry catalog for the current pricing . To run these optional exercises, you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions. git 2.24.1 or higher Docker 3.0.4 or higher","title":"Optional Lab 2: Push the example containers to a container registry"},{"location":"push-to-container-registry/#step-1-login-to-quay-on-your-local-machine","text":"docker login quay.io","title":"Step 1: Login to Quay on your local machine"},{"location":"push-to-container-registry/#step-2-ensure-root_path-variable-is-set-to-your_pathce-cns-of-your-cloned-repository","text":"Display the $ROOT_PATH you set in Lab 1: Setup the example application . echo $ROOT_PATH","title":"Step 2: Ensure $ROOT_PATH variable is set to YOUR_PATH/ce-cns of your cloned repository"},{"location":"push-to-container-registry/#step-3-configure-articles","text":"When you run the articles microservice on CE ensure you have uncomment quarkus.http.port=8080 and #quarkus.http.port=8083 commented out. cd $ROOT_FOLDER /code/articles/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = http : //localhost:8282/auth/realms/quarkus quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret quarkus . http . port = 8080 # When running locally , uncomment the next line , to use the port 8083 # quarkus . http . port = 8083 quarkus . http . cors = true resteasy . role . based . security = true","title":"Step 3: Configure articles"},{"location":"push-to-container-registry/#step-4-export-your-quay-username-as-your-repository-name","text":"export MY_REPOSITORY = YOUR_USERNAME Note: In the image below you see an example where you can find the name, you should use.","title":"Step 4: Export your Quay username as your repository name"},{"location":"push-to-container-registry/#step-5-execute-following-bash-automation","text":"This bash script will build and push your container images to Red Hat Quay.io . cd $ROOT_FOLDER /CE bash quay-build-and-push.sh","title":"Step 5: Execute following bash automation"},{"location":"push-to-container-registry/#step-6-verify-the-public-access-for-your-containers","text":"Visit your repository on Red Hat Quay.io and very your container are available for public usage. This is only the case if you going to run the same setup as given in Lab 1: Setup the example application .","title":"Step 6: Verify the public access for your containers"},{"location":"push-to-container-registry/#step-7-update-the-ce-deploy-appssh-bash-script","text":"Now you have to refect the changes you made for the container registry in the ce-deploy-apps.sh , in case if you plan to use this bash script to deploy your containers to Code Engine . Open the bash script with an editor cd $ROOT_FOLDER /ce nano ce-deploy-apps.sh In case you have just change the repository name, you only have to replace tsuedbroecker with your value and it should work. ... export PROJECT_NAME = $MYPROJECT export RESOURCE_GROUP = default export REPOSITORY = tsuedbroecker ... Congratulations, you have successfully completed this optional hands-on lab tasks for Push the example containers to a container registry section of the workshop. Awesome","title":"Step 7: Update the ce-deploy-apps.sh bash script"},{"location":"run-application-locally/","text":"Optional Lab 1: Run the example application locally \u00b6 To run these optional exercises you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions. git 2.24.1 or higher yarn 1.22.4 or higher Node.js v14.6.0 or higher Apache Maven 3.6.3 Docker 3.0.4 or higher (running Keycloak locally) Java 9 or higher Architecture \u00b6 Here is the local architecture whichs shows the Web-App and the two microservices Web-API and Articles and Keycloak are running on your local machine in terminal sessions. The gif shows the logon to the example web frontend application. This is the simplified sequence which happens in the background: When we invoke the web frontend on ` http://localhost:8081 we will be routed to login dialog provided by the Keyloak server. After the successfully Keycloak authentication we will be redirected to the web frontend and the frontend gets an access-token. The access-token contains the needed information for the authorization at the Java microservice Web-API and the user information. The web frontend extracts and displays the username. Then the web fronted uses the access-token to invoke the Web-API Microservice endpoint to get the articles and displays the Articles. Step 1: Clone the project to your local machine \u00b6 git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd ) Setup Keycloak locally \u00b6 In this part we will setup Keycloak locally. We will run a local Keycloak Docker container and reuse an existing realm configuration. The image below shows the relevant elements we will use later. Step 1: Start Keycloak Docker image local \u00b6 Open the first terminal session and enter following command: docker run -it -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -p 8282 :8080 jboss/keycloak:9.0.2 Note: We use here KEYCLOAK_USER=admin KEYCLOAK_PASSWORD=admin 8282:8080 port forwarding keycloak:9.0.2 container image Step 2: Import the existing realm configuration \u00b6 Open the Keycloak in a browser select the Administration Console Use following URL: http://localhost:8282/ Login to using the URL in your browser with user/admin and password/admin Select Add realm Choose for import Select file and open the cns-realm.json . Step 3: Press view all users \u00b6 You should see following users: admin , alice , jdoe Step 4: Verify the role mapping \u00b6 Setup Web-App \u00b6 Step 1: Configure web-app \u00b6 The web-app is preconfigured for local usage of Keycloak ( http://localhost:8282/auth ) and web-api ( http://localhost:8082/articles ) and save the changes. cd $ROOT_FOLDER /code/web-app/src nano main.js Example: if ( currentHostname . indexOf ( 'localhost' ) > - 1 ) { console . log ( \"--> log: option 1\" ); urls = { api : 'http://localhost:8082' , login : 'http://localhost:8282/auth' , cns : 'http://localhost:8081' } store . commit ( \"setAPIAndLogin\" , urls ); } Step 2: Run the web-app \u00b6 Open the second terminal session and start the application on port 8081. cd $ROOT_FOLDER /code/web-app yarn install yarn serve Setup Web-Api \u00b6 Step 1: Configure web-api \u00b6 When we run the example application locally, we don't need to change source code for the web-api microservce. cd $ROOT_FOLDER /code/web-api/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = $ { QUARKUS_OIDC_AUTH_SERVER_URL : ' http : //localhost:8282/auth/realms/quarkus'} quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret quarkus . http . port = 8082 quarkus . http . cors = true org . eclipse . microprofile . rest . client . propagateHeaders = Authorization cns . articles - url = $ { CNS_ARTICLES_URL : ' http : //localhost:8083/articles'} Step 2: Run the web-api Microservice \u00b6 Open a third terminal and start the service on port 8082. cd $ROOT_FOLDER /code/web-api mvn clean package quarkus:dev Setup Articles microservice \u00b6 Step 1: Configure articles \u00b6 When you run the articles microservice locally ensure you have uncomment quarkus.http.port=8083 and #quarkus.http.port=8080 commented out. cd $ROOT_FOLDER /code/articles/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = http : //localhost:8282/auth/realms/quarkus quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret # quarkus . http . port = 8080 # When running locally , uncomment the next line , to use the port 8083 quarkus . http . port = 8083 quarkus . http . cors = true resteasy . role . based . security = true Step 2: Run the articles Microservice \u00b6 Open a fourth terminal and start the service on port 8083. cd $ROOT_FOLDER /code/articles mvn clean package quarkus:dev Open the Web-App \u00b6 Step 1: Open the Web-App in your local browser \u00b6 Open the following URL in your browser: http://localhost:8081 Step 2: Log in with the test user: alice, password: alice \u00b6 Congratulations, you have successfully completed this optional hands-on lab tasks for Authentication and Authorization with Keycloak and Quarkus section of the workshop. Awesome","title":"1. Run the example application locally"},{"location":"run-application-locally/#optional-lab-1-run-the-example-application-locally","text":"To run these optional exercises you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions. git 2.24.1 or higher yarn 1.22.4 or higher Node.js v14.6.0 or higher Apache Maven 3.6.3 Docker 3.0.4 or higher (running Keycloak locally) Java 9 or higher","title":"Optional Lab 1: Run the example application locally"},{"location":"run-application-locally/#architecture","text":"Here is the local architecture whichs shows the Web-App and the two microservices Web-API and Articles and Keycloak are running on your local machine in terminal sessions. The gif shows the logon to the example web frontend application. This is the simplified sequence which happens in the background: When we invoke the web frontend on ` http://localhost:8081 we will be routed to login dialog provided by the Keyloak server. After the successfully Keycloak authentication we will be redirected to the web frontend and the frontend gets an access-token. The access-token contains the needed information for the authorization at the Java microservice Web-API and the user information. The web frontend extracts and displays the username. Then the web fronted uses the access-token to invoke the Web-API Microservice endpoint to get the articles and displays the Articles.","title":"Architecture"},{"location":"run-application-locally/#step-1-clone-the-project-to-your-local-machine","text":"git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd )","title":"Step 1: Clone the project to your local machine"},{"location":"run-application-locally/#setup-keycloak-locally","text":"In this part we will setup Keycloak locally. We will run a local Keycloak Docker container and reuse an existing realm configuration. The image below shows the relevant elements we will use later.","title":"Setup Keycloak locally"},{"location":"run-application-locally/#step-1-start-keycloak-docker-image-local","text":"Open the first terminal session and enter following command: docker run -it -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -p 8282 :8080 jboss/keycloak:9.0.2 Note: We use here KEYCLOAK_USER=admin KEYCLOAK_PASSWORD=admin 8282:8080 port forwarding keycloak:9.0.2 container image","title":"Step 1: Start Keycloak Docker image local"},{"location":"run-application-locally/#step-2-import-the-existing-realm-configuration","text":"Open the Keycloak in a browser select the Administration Console Use following URL: http://localhost:8282/ Login to using the URL in your browser with user/admin and password/admin Select Add realm Choose for import Select file and open the cns-realm.json .","title":"Step 2: Import the existing realm configuration"},{"location":"run-application-locally/#step-3-press-view-all-users","text":"You should see following users: admin , alice , jdoe","title":"Step 3: Press view all users"},{"location":"run-application-locally/#step-4-verify-the-role-mapping","text":"","title":"Step 4: Verify the role mapping"},{"location":"run-application-locally/#setup-web-app","text":"","title":"Setup Web-App"},{"location":"run-application-locally/#step-1-configure-web-app","text":"The web-app is preconfigured for local usage of Keycloak ( http://localhost:8282/auth ) and web-api ( http://localhost:8082/articles ) and save the changes. cd $ROOT_FOLDER /code/web-app/src nano main.js Example: if ( currentHostname . indexOf ( 'localhost' ) > - 1 ) { console . log ( \"--> log: option 1\" ); urls = { api : 'http://localhost:8082' , login : 'http://localhost:8282/auth' , cns : 'http://localhost:8081' } store . commit ( \"setAPIAndLogin\" , urls ); }","title":"Step 1: Configure web-app"},{"location":"run-application-locally/#step-2-run-the-web-app","text":"Open the second terminal session and start the application on port 8081. cd $ROOT_FOLDER /code/web-app yarn install yarn serve","title":"Step 2: Run the web-app"},{"location":"run-application-locally/#setup-web-api","text":"","title":"Setup Web-Api"},{"location":"run-application-locally/#step-1-configure-web-api","text":"When we run the example application locally, we don't need to change source code for the web-api microservce. cd $ROOT_FOLDER /code/web-api/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = $ { QUARKUS_OIDC_AUTH_SERVER_URL : ' http : //localhost:8282/auth/realms/quarkus'} quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret quarkus . http . port = 8082 quarkus . http . cors = true org . eclipse . microprofile . rest . client . propagateHeaders = Authorization cns . articles - url = $ { CNS_ARTICLES_URL : ' http : //localhost:8083/articles'}","title":"Step 1: Configure web-api"},{"location":"run-application-locally/#step-2-run-the-web-api-microservice","text":"Open a third terminal and start the service on port 8082. cd $ROOT_FOLDER /code/web-api mvn clean package quarkus:dev","title":"Step 2: Run the web-api Microservice"},{"location":"run-application-locally/#setup-articles-microservice","text":"","title":"Setup Articles microservice"},{"location":"run-application-locally/#step-1-configure-articles","text":"When you run the articles microservice locally ensure you have uncomment quarkus.http.port=8083 and #quarkus.http.port=8080 commented out. cd $ROOT_FOLDER /code/articles/src/main/resources nano application.properties Example: # When running locally , uncomment the next line , add your Keycloak URL , must end on ' / auth / realms / quarkus ' quarkus . oidc . auth - server - url = http : //localhost:8282/auth/realms/quarkus quarkus . oidc . client - id = backend - service quarkus . oidc . credentials . secret = secret # quarkus . http . port = 8080 # When running locally , uncomment the next line , to use the port 8083 quarkus . http . port = 8083 quarkus . http . cors = true resteasy . role . based . security = true","title":"Step 1: Configure articles"},{"location":"run-application-locally/#step-2-run-the-articles-microservice","text":"Open a fourth terminal and start the service on port 8083. cd $ROOT_FOLDER /code/articles mvn clean package quarkus:dev","title":"Step 2: Run the articles Microservice"},{"location":"run-application-locally/#open-the-web-app","text":"","title":"Open the Web-App"},{"location":"run-application-locally/#step-1-open-the-web-app-in-your-local-browser","text":"Open the following URL in your browser: http://localhost:8081","title":"Step 1: Open the Web-App in your local browser"},{"location":"run-application-locally/#step-2-log-in-with-the-test-user-alice-password-alice","text":"Congratulations, you have successfully completed this optional hands-on lab tasks for Authentication and Authorization with Keycloak and Quarkus section of the workshop. Awesome","title":"Step 2: Log in with the test user: alice, password: alice"},{"location":"setup-example/","text":"Lab 1: Setup the example application \u00b6 IBM Cloud Account \u00b6 Step 1: Create a PayAsYouGo IBM Cloud Account \u00b6 Open this link and follow the guided steps. Code Engine has a free tier per month and we expect, if you haven't used that free tier in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free lite plans for the service instances of IBM Cloud Monitoring and IBM Cloud Log Analysis . Here you find the actual Code Engine pricing . The image blow shows a screen shot from 26. May 2021 of the free tier . Create Code Engine project \u00b6 Step 1: Logon to IBM Cloud and navigate to the Code Engine projects \u00b6 Use following link to directly navigate to the Code Engine projects in IBM Cloud. https://cloud.ibm.com/codeengine/projects Step 2: Navigate to Code Engine projects in IBM Cloud and press Create \u00b6 Step 3: Create a Code Engine project called cloud-native-starter-[YOUR-EXTENTION] \u00b6 Enter following values and select create and wait until your project is created. Location : Dallas Name : cloud-native-starter-[YOUR-EXTENTION] (The name must be unique in the in Cloud Location Dallas ) Resource group: default The image below shows the created Code Engine project. IBM Cloud Shell \u00b6 Step 1: Open the IBM Cloud Shell \u00b6 When using the IBM Cloud Shell, no client-side setup is required for this workshop, it comes with all necessary CLIs (command line tools). Use following link to directly open the IBM Cloud Shell . https://cloud.ibm.com/shell In your browser, login to the IBM Cloud Dashboard and open the IBM Cloud Shell from here: Note: Your workspace includes 500 MB of temporary storage. This session will close after an hour of inactivity. If you don't have any active sessions for an hour or you reach the 50-hour weekly usage limit, your workspace data is removed. Step 2: IBM Cloud Shell \u00b6 Now you are logged on with your IBM Cloud account. Deploy the example application \u00b6 Step 1: Clone the GitHub project to the IBM Cloud Shell \u00b6 Insert these commands to clone the GitHub project to the IBM Cloud Shell . git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd ) Step 2: Now set the environment variable for later usage \u00b6 REMEMBER! Your Code Engine project name cloud-native-starter-[YOUR-EXTENTION] export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ] Step 3: Execute following bash automation \u00b6 Don't worry, this script may take several minutes. cd $ROOT_FOLDER /CE bash ce-deploy-apps.sh For a better understanding here are the simplified steps that are carried out in the script using the IBM Cloud Code Engine CLI : Connect to the Code Engine project with the Code Engine CLI and get the namespace for later usage to define the internal route. Deploy web-app to get needed route for the redirect of Keycloak Deploy Keycloak simply as a container (that's the reason why not scale to zero (stateful)) Configure the Keycloak realm json file based on the web-app url and create realm. Deploy articles microservice is defined as local cluster here, we need to know the namespace . ( details are related to Knative ) Deploy web-api with the needed Keycloak and articles urls as environment variables. Reconfigure web-app with the needed Keycloak and web-api urls as environment variables. For the executon to the bash script are following variables relevant: export PROJECT_NAME = $MYPROJECT #your project name export RESOURCE_GROUP = default #the resource group in IBM Cloud you defined during the creation of the project export REPOSITORY = tsuedbroecker #the name of the public container repository on Quay export REGION = \"us-south\" #the region in IBM Cloud that is used. When you choose Dallas as location during the creation of the project the region is \"us-south\" PS: You can also use the ce-deploy-apps-secret.sh script, which does create secrets for the user and password for the Keycloak container. cd $ROOT_FOLDER /CE bash ce-deploy-apps-secret.sh Step 4: Inspect the execution output \u00b6 The following shows an example execution result of the bash script and the last four lines do contain the routes to the applications. ************************************ URLs ************************************ - Keycloak : https://keycloak.9xztp8web0h.us-south.codeengine.appdomain.cloud/auth/admin/master/console/#/realms/quarkus - Web-API : https://web-api.9xztp8web0h.us-south.codeengine.appdomain.cloud - Articles : http://articles.9xztp8web0h.svc.cluster.local/articles - Web-App : https://web-app.9xztp8web0h.us-south.codeengine.appdomain.cloud You can open the example application with the Web-App link. Copy the link and open the link in a browser. Step 5: Open the example application in your browser \u00b6 Use user: alice and password: alice for the logon. Because of scale to zero it could be that the first invocation of the articles cloud take longer. Just refresh the browser and then you should see following page. Congratulations, you have successfully completed this hands-on lab Setup the example application of the workshop. Awesome","title":"1. Setup the example application"},{"location":"setup-example/#lab-1-setup-the-example-application","text":"","title":"Lab 1: Setup the example application"},{"location":"setup-example/#ibm-cloud-account","text":"","title":"IBM Cloud Account"},{"location":"setup-example/#step-1-create-a-payasyougo-ibm-cloud-account","text":"Open this link and follow the guided steps. Code Engine has a free tier per month and we expect, if you haven't used that free tier in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free lite plans for the service instances of IBM Cloud Monitoring and IBM Cloud Log Analysis . Here you find the actual Code Engine pricing . The image blow shows a screen shot from 26. May 2021 of the free tier .","title":"Step 1: Create a PayAsYouGo IBM Cloud Account"},{"location":"setup-example/#create-code-engine-project","text":"","title":"Create Code Engine project"},{"location":"setup-example/#step-1-logon-to-ibm-cloud-and-navigate-to-the-code-engine-projects","text":"Use following link to directly navigate to the Code Engine projects in IBM Cloud. https://cloud.ibm.com/codeengine/projects","title":"Step 1: Logon to IBM Cloud and navigate to the Code Engine projects"},{"location":"setup-example/#step-2-navigate-to-code-engine-projects-in-ibm-cloud-and-press-create","text":"","title":"Step 2: Navigate to Code Engine projects in IBM Cloud and press Create"},{"location":"setup-example/#step-3-create-a-code-engine-project-called-cloud-native-starter-your-extention","text":"Enter following values and select create and wait until your project is created. Location : Dallas Name : cloud-native-starter-[YOUR-EXTENTION] (The name must be unique in the in Cloud Location Dallas ) Resource group: default The image below shows the created Code Engine project.","title":"Step 3: Create a Code Engine project called cloud-native-starter-[YOUR-EXTENTION]"},{"location":"setup-example/#ibm-cloud-shell","text":"","title":"IBM Cloud Shell"},{"location":"setup-example/#step-1-open-the-ibm-cloud-shell","text":"When using the IBM Cloud Shell, no client-side setup is required for this workshop, it comes with all necessary CLIs (command line tools). Use following link to directly open the IBM Cloud Shell . https://cloud.ibm.com/shell In your browser, login to the IBM Cloud Dashboard and open the IBM Cloud Shell from here: Note: Your workspace includes 500 MB of temporary storage. This session will close after an hour of inactivity. If you don't have any active sessions for an hour or you reach the 50-hour weekly usage limit, your workspace data is removed.","title":"Step 1: Open the IBM Cloud Shell"},{"location":"setup-example/#step-2-ibm-cloud-shell","text":"Now you are logged on with your IBM Cloud account.","title":"Step 2: IBM Cloud Shell"},{"location":"setup-example/#deploy-the-example-application","text":"","title":"Deploy the example application"},{"location":"setup-example/#step-1-clone-the-github-project-to-the-ibm-cloud-shell","text":"Insert these commands to clone the GitHub project to the IBM Cloud Shell . git clone https://github.com/thomassuedbroecker/ce-cns.git cd ce-cns ROOT_FOLDER = $( pwd )","title":"Step 1: Clone the GitHub project to the IBM Cloud Shell"},{"location":"setup-example/#step-2-now-set-the-environment-variable-for-later-usage","text":"REMEMBER! Your Code Engine project name cloud-native-starter-[YOUR-EXTENTION] export MYPROJECT = cloud-native-starter- [ YOUR-EXTENTION ]","title":"Step 2: Now set the environment variable for later usage"},{"location":"setup-example/#step-3-execute-following-bash-automation","text":"Don't worry, this script may take several minutes. cd $ROOT_FOLDER /CE bash ce-deploy-apps.sh For a better understanding here are the simplified steps that are carried out in the script using the IBM Cloud Code Engine CLI : Connect to the Code Engine project with the Code Engine CLI and get the namespace for later usage to define the internal route. Deploy web-app to get needed route for the redirect of Keycloak Deploy Keycloak simply as a container (that's the reason why not scale to zero (stateful)) Configure the Keycloak realm json file based on the web-app url and create realm. Deploy articles microservice is defined as local cluster here, we need to know the namespace . ( details are related to Knative ) Deploy web-api with the needed Keycloak and articles urls as environment variables. Reconfigure web-app with the needed Keycloak and web-api urls as environment variables. For the executon to the bash script are following variables relevant: export PROJECT_NAME = $MYPROJECT #your project name export RESOURCE_GROUP = default #the resource group in IBM Cloud you defined during the creation of the project export REPOSITORY = tsuedbroecker #the name of the public container repository on Quay export REGION = \"us-south\" #the region in IBM Cloud that is used. When you choose Dallas as location during the creation of the project the region is \"us-south\" PS: You can also use the ce-deploy-apps-secret.sh script, which does create secrets for the user and password for the Keycloak container. cd $ROOT_FOLDER /CE bash ce-deploy-apps-secret.sh","title":"Step 3: Execute following bash automation"},{"location":"setup-example/#step-4-inspect-the-execution-output","text":"The following shows an example execution result of the bash script and the last four lines do contain the routes to the applications. ************************************ URLs ************************************ - Keycloak : https://keycloak.9xztp8web0h.us-south.codeengine.appdomain.cloud/auth/admin/master/console/#/realms/quarkus - Web-API : https://web-api.9xztp8web0h.us-south.codeengine.appdomain.cloud - Articles : http://articles.9xztp8web0h.svc.cluster.local/articles - Web-App : https://web-app.9xztp8web0h.us-south.codeengine.appdomain.cloud You can open the example application with the Web-App link. Copy the link and open the link in a browser.","title":"Step 4: Inspect the execution output"},{"location":"setup-example/#step-5-open-the-example-application-in-your-browser","text":"Use user: alice and password: alice for the logon. Because of scale to zero it could be that the first invocation of the articles cloud take longer. Just refresh the browser and then you should see following page. Congratulations, you have successfully completed this hands-on lab Setup the example application of the workshop. Awesome","title":"Step 5: Open the example application in your browser"}]}